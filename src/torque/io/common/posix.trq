(ns torque.io.common.posix
  (:require
    [torque.ffi :as ffi])
  (:use
    [torque.io.common.types]))

(def libc (so* "c"))

;; basic file descriptor API

(def ^:private -open   (import* libc open :sint32 (:string :sint32)))
(def ^:private -create (import* libc open :sint32 (:string :sint32 :sint32)))
(def ^:private -close  (import* libc close :sint32 (:sint32)))

(def ^:private -read  (import* libc read :uint64 (:sint32 :ptr :uint64)))
(def ^:private -pread (import* libc pread :uint64 (:sint32 :ptr :uint64 :uint64)))
(def ^:private -write (import* libc write :uint64 (:sint32 :ptr :uint64)))

(def ^:private -stat  (import* libc stat :sint32 (:string :ptr)))
(def ^:private -lstat (import* libc stat :sint32 (:string :ptr)))

(def ^:private -opendir  (import* libc opendir :ptr (:string)))
(def ^:private -closedir (import* libc closedir :sint32 (:ptr)))
(def ^:private -readdir  (import* libc readdir :ptr (:ptr)))

(def memcpy (import* libc memcpy :ptr (:ptr :ptr :sint64)))

;; directory API

(def DT_UNKNOWN 0)
(def DT_FIFO    1)
(def DT_CHR     2)
(def DT_DIR     4)
(def DT_BLK     6)
(def DT_REG     8)
(def DT_LNK     10)
(def DT_SOCK    12)
(def DT_WHT     14)

(def O_RDONLY 0)
(def O_WRONLY 1)
(def O_RDWR   2)

(def path-delimiter "/")

;; TODO: these should be generated by the compiler eventually

(def dirent-size 1048)

(defn get-dirent-type [b]
  (get-uint8 b 6))

(defn get-dirent-namlen [b]
  (get-uint8 b 7))

(defn get-dirent-name [b]
  (let [len (get-dirent-namlen b)]
    (string (subb b 8 (+ 8 len)))))

(def stat-size 144)

(defn get-stat-st-size [b]
  (get-int64 b 96))

(defn ^:private entry-type [n]
  (cond
    (== DT_UNKNOWN n) :unknown
    (== DT_FIFO    n) :fifo
    (== DT_CHR     n) :char
    (== DT_DIR     n) :directory
    (== DT_BLK     n) :block
    (== DT_REG     n) :file
    (== DT_LNK     n) :link
    (== DT_SOCK    n) :socket
    (== DT_WHT     n) :wht))

(defn directory-entry [b]
  (let [type   (entry-type (get-dirent-type b))
        name   (get-dirent-name b)]
    (new DirectoryEntry type name)))

(deftype FileDescriptor [fd]
  IResource
  (-dispose [this]
    (when (> fd 0)
      (-close fd)
      (set! this fd -1)
      nil)))

(deftype Directory [p]
  IResource
  (-dispose [_]
    (when p
      (-closedir p)))
  IPointerTarget
  (-intptr [_]
    p))

(defn ^:private read-entry [dir]
  (let [p (-readdir (intptr dir))]
    (if-not (== p 0)
      (let [buffer (make-binary dirent-size)
            _      (memcpy (intptr buffer) p dirent-size)
            entry  (directory-entry buffer)]
        entry)
      (when (ffi/system-error?)
        (ffi/throw-system-error {})))))

(defn ^:private read-entries [dir]
  (loop [out []]
    (if-let [entry (read-entry dir)]
      (recur (conj out entry))
      out)))

(defn readdir [path]
  (if-let [p (and path (ffi/not-null (-opendir path)))]
    (with-resource [dir (new Directory p)]
      (read-entries dir))
    (if (ffi/enoent?)
      []
      (ffi/throw-system-error {:path "path"}))))

(defn ^:private stat [path flags]
  (if (string? path)
    (let [stat-fn (fn stat-impl [path p]
                    (if (= (first flags) :resolve-links)
                      (-lstat path p)
                      (-stat path p)))
          buffer  (make-binary stat-size)
          ret     (stat-fn path (intptr buffer))]
      (when (zero? ret)
        buffer))))

(defn exists? [path & flags]
  (if-let [exists? (stat path flags)]
    true
    (if (ffi/enoent?)
      false
      (ffi/throw-system-error {:path path}))))

(defn ^:private throw-unknown-access [flag]
  (throw
    (ex-info (str "Unknonwn access flag: " flag)
      {:flag flag})))

(defn ^:private parse-access [flag]
  (cond
    (= flag :read)  O_RDONLY
    (= flag :write) O_WRONLY
    (= flag :rw)    O_RDWR
    :else (throw-unknown-access flag)))

(defn ^:private parse-oflags [init flags]
  (reduce
    (fn [out flag]
      (bit-or
        out
        (cond
          :else 0)))
    init
    flags))

(defn open [path access flags]
  (when (string? path)
    (let [flags (parse-oflags (parse-access access) flags)
          fd    (-open path flags)]
      (if (== fd -1)
        (ffi/throw-system-error {:path path})
        (new FileDescriptor fd)))))

(defn throw-unexpected-return [op code]
  (throw
    (ex-info (str "A posix function returned an unexpected value: " code)
      {:op   :read
       :code code})))

(defn ^:private read-result [bytes-read]
  (cond
    (> bytes-read 0)   bytes-read
    (== bytes-read -1) (ffi/throw-system-error)
    (== bytes-read 0)  :eof
    :else (throw-unexpected-return :read bytes-read)))

(defn read
  ([fd bytes buffer]
   (if fd
     (-> (-read (. fd fd) (intptr buffer) bytes)
         (read-result))))
  ([fd offset bytes buffer]
   (if fd
     (-> (-pread (. fd fd) (intptr buffer) bytes offset)
         (read-result)))))

(defn size [fd]
  (if-let [stats (stat fd)]
    (get-stat-st-size stats)
    (ffi/throw-system-error {:fd (. fd fd)})))

(def stdin  (new FileDescriptor 0))
(def stdout (new FileDescriptor 1))
(def stderr (new FileDescriptor 2))
